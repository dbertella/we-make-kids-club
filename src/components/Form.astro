---
import config from "../content/config/config.json";
import Checkbox from "./Checkbox.astro";

const options = [
  "Little hands (2-4yo)",
  "Mini maker (5-7yo)",
  "Young creatives (8-11yo)",
];
---

<section class="subscription-form">
  <form action="/actions/subscribe" method="post" id="contact-form">
    <div>
      <label for="send-email__name">Name</label>
      <input type="text" name="name" id="send-email__name" required />
    </div>
    <div>
      <label for="send-email__recipient">Email</label>
      <input
        type="email"
        name="recipient"
        id="send-email__recipient"
        required
      />
    </div>
    <div>
      <fieldset>
        <legend>Select the workshop(s) you are interested in</legend>
        {
          options.map((option) => (
            <Checkbox label={option} name="selectedWorkshops" value={option} />
          ))
        }
      </fieldset>
    </div>
    <section class="cta">
      <button type="submit" class="button">
        <svg class="spinner hidden" width="20" height="20" viewBox="0 0 24 24">
          <circle
            class="spinner-circle"
            cx="12"
            cy="12"
            r="10"
            fill="none"
            stroke="currentColor"
            stroke-width="3"
            stroke-dasharray="30 60"></circle>
        </svg>
        <span class="button-text">{config.formCta}</span>
      </button>
    </section>
  </form>
</section>

<script>
  const form = document.getElementById("contact-form") as HTMLFormElement;
  const submitButton = form.querySelector(
    'button[type="submit"]'
  ) as HTMLButtonElement;
  const loadingSpinner = submitButton.querySelector(".spinner") as HTMLElement;

  const setLoading = (isLoading: boolean) => {
    submitButton.disabled = isLoading;
    loadingSpinner.classList.toggle("hidden", !isLoading);
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);

    setLoading(true);

    try {
      const response = await fetch("/actions/subscribe", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (result.redirect) {
        window.location.href = result.redirect;
      } else {
        window.location.href = "/success";
      }

      form.reset();
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  });
</script>

<style>
  form {
    max-width: 500px;
    margin: 0 auto 3rem;
    padding: 2rem;
    border-radius: 5px;
    background-color: rgba(var(--yellow), 0.1);
    border: 3px solid rgb(var(--yellow));
  }

  label {
    display: block;
    color: rgb(var(--orange));
    font-weight: bold;
    font-size: 0.9rem;
  }

  input[type="email"],
  input[type="text"],
  textarea,
  fieldset {
    width: calc(100% - 2rem);
    padding: 1rem;
    margin-bottom: 2rem;
    border: 2px solid rgb(var(--yellow));
    border-radius: 5px;
  }

  textarea {
    height: 100px;
    resize: vertical;
  }

  fieldset {
    background-color: rgba(var(--yellow), 0.05);
  }

  legend {
    color: rgb(var(--orange));
    font-weight: bold;
    padding: 0 1rem;
    border-radius: 5px;
    font-size: 0.9rem;
  }

  .subscription-form .button {
    opacity: 0.5;
    pointer-events: none;
    cursor: not-allowed;
  }

  .subscription-form:has(input:checked) .button {
    pointer-events: auto;
    opacity: 1;
    cursor: pointer;
  }

  .spinner {
    margin-right: 0.5rem;
  }

  .spinner-circle {
    transform-origin: center;
    animation: rotate 1s linear infinite;
  }

  @keyframes rotate {
    100% {
      transform: rotate(360deg);
    }
  }

  .hidden {
    display: none;
  }
</style>
